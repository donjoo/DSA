'''

üå± What is a Graph?

A Graph is a collection of:

    Vertices (nodes) ‚Äî entities

    Edges ‚Äî connections between vertices

Mathematically:
G = (V, E)
Where:

    V = set of vertices

    E = set of edges (pairs of vertices)


 Graph Terminology

    Vertex (node) ‚Üí A point in the graph

    Edge ‚Üí Connection between two vertices

    Adjacent vertices ‚Üí Vertices connected by an edge

    Degree ‚Üí Number of edges connected to a vertex

        In-degree (incoming edges)

        Out-degree (outgoing edges)

    Path ‚Üí Sequence of vertices connected by edges

    Cycle ‚Üí Path that starts and ends at the same vertex

    Connected graph ‚Üí Path exists between every pair of vertices




| Type                   | Description                                    |
| ---------------------- | ---------------------------------------------- |
| **Directed** (Digraph) | Edges have a direction                         |
| **Undirected**         | Edges have no direction                        |
| **Weighted**           | Edges have weights/costs                       |
| **Unweighted**         | All edges have equal cost                      |
| **Cyclic**             | Has at least one cycle                         |
| **Acyclic**            | No cycles (e.g., DAG - Directed Acyclic Graph) |
| **Connected**          | Every vertex reachable from another            |
| **Disconnected**       | Some vertices not connected                    |




Graph Storage Methods
1Ô∏è‚É£ Adjacency List

    What: Stores each vertex and a list of its neighbors.

    Implementation: Dictionary ‚Üí linked list (or array) of connected vertices.

    Time complexity:

        Check adjacency ‚Üí O(V) in worst case for linked list

        Traversal ‚Üí O(V + E)

    Space complexity: O(V + E)
    (V = vertices, E = edges)

üìå Example as Linked List:

graph = {
    0: [1, 4],
    1: [0, 2, 3],
    2: [1],
    3: [1, 4],
    4: [0, 3]
}

Pros:

    Efficient for sparse graphs

    Saves memory compared to adjacency matrix

Cons:

    Checking if an edge exists may take O(V)



---------------------
2Ô∏è‚É£ Adjacency Matrix

    What: A 2D array where matrix[i][j] = 1 (or weight) if there‚Äôs an edge, else 0 (or ‚àû for weighted graphs).

    Time complexity:

        Check adjacency ‚Üí O(1)

        Traversal ‚Üí O(V¬≤)

    Space complexity: O(V¬≤)

üìå Example:
   0 1 2 3
0: 0 1 0 1
1: 1 0 1 1
2: 0 1 0 0
3: 1 1 0 0

Pros:

    Fast adjacency check

    Simple implementation

Cons:

    Wastes space for sparse graphs

3Ô∏è‚É£ Graph Traversal

Breadth-First Search (BFS)

    Level-by-level

    Uses a queue

    O(V + E) time

Depth-First Search (DFS)

    Goes deep before backtracking

    Uses recursion or stack

    O(V + E) time

Practice:

    BFS and DFS on adjacency list

    Detect if a graph is connected

    Detect cycles





--------------------------------------------------------------------


| Feature        | BFS                               | DFS                              |
| -------------- | --------------------------------- | -------------------------------- |
| Data Structure | Queue (FIFO)                      | Stack (LIFO) / Recursion         |
| Order          | Level-by-level                    | Deep before backtracking         |
| Use Case       | Shortest path in unweighted graph | Path existence, topological sort |
| Space          | O(V)                              | O(V)                             |






'''

from collections import defaultdict


# 2Ô∏è‚É£ Graph Class Using Adjacency List
class Graph:
    
    def __init__(self,directed=False):
        self.graph = defaultdict(list)
        self.directed = directed
        
    def add_edge(self,u,v):
        self.graph[u].append(v)
        if not self.directed:
            self.graph[v].append(u)
            
            
    def display(self):
        for vertex in self.graph:
            print(vertex,'->',self.graph[vertex])
            
g = Graph(directed=False)


g.add_edge("A", "B")
g.add_edge("A", "C")
g.add_edge("B", "D")
g.add_edge("C", "D")

g.display()






# 4Ô∏è‚É£ Graph Using Adjacency Matrix
class GraphMatrix:
    
    def __init__(self,vertices):
        self.v = vertices
        self.matrix = [[0] * vertices for _ in range(vertices)]
        
    def add_edge(self,u,v):
        self.matrix[u][v] = 1
        self.matrix[v][u] = 1
    
    def display(self):
        for row in self.matrix:
            print(row)
            
gm = GraphMatrix(4)  # 4 vertices: 0,1,2,3
gm.add_edge(0, 1)
gm.add_edge(0, 2)
gm.add_edge(1, 3)
gm.display()
 



